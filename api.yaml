openapi: 3.0.3
info:
  title: Grocery Kstore - OpenAPI 3.0
  description: |-
    These are the API definitions for the Grocery store app to be mmade for the MAD 1 course of IIT Madras May term, 2023. This is  made by the student 21f3002304. 
    
    Some useful links:
    - [The app URL when you run it from the same device](http://127.0.0.1:5000)
    - The location of the API file in the project folder.`Project > My_API`
  contact:
    email: 21f3002304@ds.study.iitm.ac.in
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  version: 1.0.0
servers:
  - url: http://127.0.0.1:5000/
paths:
  /api/product:
    post:
      tags:
        - product
      summary: Add a new product to the store
      description: Add a new product to the store
      operationId: addProduct
      requestBody:
        description: Create a new product in the store
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Product'
        required: true
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'    
        '402':
          description: Invalid input
            
  /api/product/{product_id}:
    put:
      tags:
        - product
      summary: Update an existing product
      description: Please make sure the product ID is correct 
      operationId: updateProduct
      parameters:
        - name: product_id
          in: path
          description: ID of product to return
          required: true
          schema:
            type: integer
      requestBody:
        description: Update an existent product in the store
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Product'
        required: true
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
        '404':
          description: value not found
        '402':
          description: invalid input
  /api/product/{product_name}:      
    get:
      tags:
        - product
      summary: Find product by name
      description: Returns a single product
      operationId: getProductByName
      parameters:
        - name: product_name
          in: path
          description: name of product to return
          required: true
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'  
        '500':
          description: Internal server error
        '404':
          description: value not found
    delete:
      tags:
        - product
      summary: Deletes a product
      description: delete a product
      operationId: deleteProduct
      parameters:
        - name: product_name
          in: path
          description: name of product to return
          required: true
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
        '402':
          description: Invalid input
          
  /api/pet/{product_name}/uploadImage:
    post:
      tags:
        - product
      summary: uploads an image
      description: ''
      operationId: uploadFile
      parameters:
        - name: product_name
          in: path
          description: name of product to update
          required: true
          schema:
            type: string
      requestBody:
        content:
          image/jpeg:
            schema:
              type: string
              format: binary
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
        '402':
          description: invalid input
          
  /api/inventory:
    post:
      tags:
        - inventory
      summary: Create a category
      description: Place a new category in the store
      operationId: placeOrder
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Category'
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Category'
        '402':
          description: Invalid input
    
  /api/inventory/{category_name}: 
    put:
      tags:
        - inventory
      summary: Edit category
      description: Make sure category already exists.
      operationId: editCategory
      parameters:
        - name: category_name
          in: path
          description: category that needs to be edited
          required: true
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Category'
        '402':
          description: Invalid input
          
    get:
      tags:
        - inventory
      summary: Returns products in category
      description: Returns products in category
      operationId: getInventory
      parameters:
        - name: category_name
          in: path
          description: name of product to return
          required: true
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/product_list'
        '404':
          description: value not found
    delete:
      tags:
        - inventory
      summary: Delete category by category name
      description: make sure category exists
      operationId: deleteCategory
      
      parameters:
        - name: category_name
          in: path
          description: name of product to return
          required: true
          schema:
            type: string
      responses:
        '500':
          description: Internal server error
        '404':
          description: value not found
          
  /api/user:
    post:
      tags:
        - user
      summary: Create user
      description: This can only be done by the logged in user.
      operationId: createUser
      requestBody:
        description: Created user object
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        default:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        
        
components:
  schemas:
    Category:
      type: object
      properties:
        category_name:
          type: string
          example: Fruits
        quality:
          type: string
          description: price per type of unit
          example: per dozen
    User:
      type: object
      properties:
        user_id:
          type: integer
          format: int64
          example: 10
        name:
          type: string
          example: theUser
        password:
          type: string
          example: John
        manager:
          type: boolean
          example: 1
    Product:
      required:
        - product_name
        - price
        - quantity
        - description
        - supplier
        - expirey_date
      type: object
      properties:
        product_id:
          type: integer
          format: int64
          example: 10
        price:
          type: integer
          format: int64
          example: 80
        quantity:
          type: integer
          format: int64
          example: 90
        product_name:
          type: string
          example: Banana
        description:
          type: string
          example: coup free bananas!
        supplier:
          type: string
          example: Not some poor latin american country
        expirey_date:
          type: string
          format: date
        category:
          $ref: '#/components/schemas/Category'
    product_list:
      type: object
      properties:
        products_in_category:
          type: array
          items:
            type: string
          example: [prod_1,prod_2,...]
    ApiResponse:
      type: object
      properties:
        code:
          type: integer
          format: int32
        message:
          type: string
